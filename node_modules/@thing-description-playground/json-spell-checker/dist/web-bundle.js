(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.JsonSpellChecker = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
module.exports={
  "title": "Thing Description",
  "version": "1.1-05-September-2022",
  "description": "JSON Schema for validating TD instances against the TD information model. TD instances can be with or without terms that have default values",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "https://raw.githubusercontent.com/w3c/wot-thing-description/main/validation/td-json-schema-validation.json",
  "definitions": {
    "anyUri": {
      "type": "string"
    },
    "description": {
      "type": "string"
    },
    "descriptions": {
      "type": "object",
      "additionalProperties": {
        "type": "string"
      }
    },
    "title": {
      "type": "string"
    },
    "titles": {
      "type": "object",
      "additionalProperties": {
        "type": "string"
      }
    },
    "security": {
      "oneOf": [
        {
          "type": "array",
          "items": {
            "type": "string"
          },
          "minItems": 1
        },
        {
          "type": "string"
        }
      ]
    },
    "scopes": {
      "oneOf": [
        {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        {
          "type": "string"
        }
      ]
    },
    "subprotocol": {
      "type": "string",
      "examples": ["longpoll", "websub", "sse"]
    },
    "thing-context-td-uri-v1": {
      "type": "string",
      "const": "https://www.w3.org/2019/wot/td/v1"
    },
    "thing-context-td-uri-v1.1": {
      "type": "string",
      "const": "https://www.w3.org/2022/wot/td/v1.1"
    },
    "thing-context-td-uri-temp": {
      "type": "string",
      "const": "http://www.w3.org/ns/td"
    },
    "thing-context": {
      "anyOf": [
        {
          "$comment": "New context URI with other vocabularies after it but not the old one",
          "type": "array",
          "items": [
            {
              "$ref": "#/definitions/thing-context-td-uri-v1.1"
            }
          ],
          "additionalItems": {
            "anyOf": [
              {
                "$ref": "#/definitions/anyUri"
              },
              {
                "type": "object"
              }
            ],
            "not": {
              "$ref": "#/definitions/thing-context-td-uri-v1"
            }
          }
        },
        {
          "$comment": "Only the new context URI",
          "$ref": "#/definitions/thing-context-td-uri-v1.1"
        },
        {
          "$comment": "Old context URI, followed by the new one and possibly other vocabularies. minItems and contains are required since prefixItems does not say all items should be provided",
          "type": "array",
          "prefixItems": [
            {
              "$ref": "#/definitions/thing-context-td-uri-v1"
            },
            {
              "$ref": "#/definitions/thing-context-td-uri-v1.1"
            }
          ],
          "minItems": 2,
          "contains": {
            "$ref": "#/definitions/thing-context-td-uri-v1.1"
          },
          "additionalItems": {
            "anyOf": [
              {
                "$ref": "#/definitions/anyUri"
              },
              {
                "type": "object"
              }
            ]
          }
        },
        {
          "$comment": "Old context URI, followed by possibly other vocabularies. minItems and contains are required since prefixItems does not say all items should be provided",
          "type": "array",
          "prefixItems": [
            {
              "$ref": "#/definitions/thing-context-td-uri-v1"
            }
          ],
          "minItems": 1,
          "contains": {
            "$ref": "#/definitions/thing-context-td-uri-v1"
          },
          "additionalItems": {
            "anyOf": [
              {
                "$ref": "#/definitions/anyUri"
              },
              {
                "type": "object"
              }
            ]
          }
        },
        {
          "$comment": "Only the new context URI",
          "$ref": "#/definitions/thing-context-td-uri-v1"
        }
      ]
    },
    "bcp47_string": {
      "type": "string",
      "pattern": "^(((([A-Za-z]{2,3}(-([A-Za-z]{3}(-[A-Za-z]{3}){0,2}))?)|[A-Za-z]{4}|[A-Za-z]{5,8})(-([A-Za-z]{4}))?(-([A-Za-z]{2}|[0-9]{3}))?(-([A-Za-z0-9]{5,8}|[0-9][A-Za-z0-9]{3}))*(-([0-9A-WY-Za-wy-z](-[A-Za-z0-9]{2,8})+))*(-(x(-[A-Za-z0-9]{1,8})+))?)|(x(-[A-Za-z0-9]{1,8})+)|((en-GB-oed|i-ami|i-bnn|i-default|i-enochian|i-hak|i-klingon|i-lux|i-mingo|i-navajo|i-pwn|i-tao|i-tay|i-tsu|sgn-BE-FR|sgn-BE-NL|sgn-CH-DE)|(art-lojban|cel-gaulish|no-bok|no-nyn|zh-guoyu|zh-hakka|zh-min|zh-min-nan|zh-xiang)))$"
    },
    "type_declaration": {
      "oneOf": [
        {
          "type": "string",
          "not": {
            "const": "tm:ThingModel"
          }
        },
        {
          "type": "array",
          "items": {
            "type": "string",
            "not": {
              "const": "tm:ThingModel"
            }
          }
        }
      ]
    },
    "dataSchema-type": {
      "type": "string",
      "enum": [
        "boolean",
        "integer",
        "number",
        "string",
        "object",
        "array",
        "null"
      ]
    },
    "dataSchema": {
      "type": "object",
      "properties": {
        "@type": {
          "$ref": "#/definitions/type_declaration"
        },
        "description": {
          "$ref": "#/definitions/description"
        },
        "title": {
          "$ref": "#/definitions/title"
        },
        "descriptions": {
          "$ref": "#/definitions/descriptions"
        },
        "titles": {
          "$ref": "#/definitions/titles"
        },
        "writeOnly": {
          "type": "boolean"
        },
        "readOnly": {
          "type": "boolean"
        },
        "oneOf": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/dataSchema"
          }
        },
        "unit": {
          "type": "string"
        },
        "enum": {
          "type": "array",
          "minItems": 1,
          "uniqueItems": true
        },
        "format": {
          "type": "string"
        },
        "const": {},
        "default": {},
        "contentEncoding": {
          "type": "string"
        },
        "contentMediaType": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/dataSchema-type"
        },
        "items": {
          "oneOf": [
            {
              "$ref": "#/definitions/dataSchema"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/dataSchema"
              }
            }
          ]
        },
        "maxItems": {
          "type": "integer",
          "minimum": 0
        },
        "minItems": {
          "type": "integer",
          "minimum": 0
        },
        "minimum": {
          "type": "number"
        },
        "maximum": {
          "type": "number"
        },
        "exclusiveMinimum": {
          "type": "number"
        },
        "exclusiveMaximum": {
          "type": "number"
        },
        "minLength": {
          "type": "integer",
          "minimum": 0
        },
        "maxLength": {
          "type": "integer",
          "minimum": 0
        },
        "multipleOf": {
          "$ref": "#/definitions/multipleOfDefinition"
        },
        "properties": {
          "additionalProperties": {
            "$ref": "#/definitions/dataSchema"
          }
        },
        "required": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "additionalResponsesDefinition": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "contentType": {
            "type": "string"
          },
          "schema": {
            "type": "string"
          },
          "success": {
            "type": "boolean"
          }
        }
      }
    },
    "multipleOfDefinition": {
      "type": ["integer", "number"],
      "exclusiveMinimum": 0
    },
    "expectedResponse": {
      "type": "object",
      "properties": {
        "contentType": {
          "type": "string"
        }
      }
    },
    "form_element_base": {
      "type": "object",
      "properties": {
        "op": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          ]
        },
        "href": {
          "$ref": "#/definitions/anyUri"
        },
        "contentType": {
          "type": "string"
        },
        "contentCoding": {
          "type": "string"
        },
        "subprotocol": {
          "$ref": "#/definitions/subprotocol"
        },
        "security": {
          "$ref": "#/definitions/security"
        },
        "scopes": {
          "$ref": "#/definitions/scopes"
        },
        "response": {
          "$ref": "#/definitions/expectedResponse"
        },
        "additionalResponses": {
          "$ref": "#/definitions/additionalResponsesDefinition"
        }
      },
      "required": ["href"],
      "additionalProperties": true
    },
    "form_element_property": {
      "allOf": [{ "$ref": "#/definitions/form_element_base" }],
      "type": "object",
      "properties": {
        "op": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "readproperty",
                "writeproperty",
                "observeproperty",
                "unobserveproperty"
              ]
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "readproperty",
                  "writeproperty",
                  "observeproperty",
                  "unobserveproperty"
                ]
              }
            }
          ]
        }
      },
      "additionalProperties": true
    },
    "form_element_action": {
      "allOf": [{ "$ref": "#/definitions/form_element_base" }],
      "type": "object",
      "properties": {
        "op": {
          "oneOf": [
            {
              "type": "string",
              "enum": ["invokeaction", "queryaction", "cancelaction"]
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["invokeaction", "queryaction", "cancelaction"]
              }
            }
          ]
        }
      },
      "additionalProperties": true
    },
    "form_element_event": {
      "allOf": [{ "$ref": "#/definitions/form_element_base" }],
      "type": "object",
      "properties": {
        "op": {
          "oneOf": [
            {
              "type": "string",
              "enum": ["subscribeevent", "unsubscribeevent"]
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["subscribeevent", "unsubscribeevent"]
              }
            }
          ]
        }
      },
      "additionalProperties": true
    },
    "form_element_root": {
      "allOf": [{ "$ref": "#/definitions/form_element_base" }],
      "type": "object",
      "properties": {
        "op": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "readallproperties",
                "writeallproperties",
                "readmultipleproperties",
                "writemultipleproperties",
                "observeallproperties",
                "unobserveallproperties",
                "queryallactions",
                "subscribeallevents",
                "unsubscribeallevents"
              ]
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "readallproperties",
                  "writeallproperties",
                  "readmultipleproperties",
                  "writemultipleproperties",
                  "observeallproperties",
                  "unobserveallproperties",
                  "queryallactions",
                  "subscribeallevents",
                  "unsubscribeallevents"
                ]
              }
            }
          ]
        }
      },
      "additionalProperties": true,
      "required": ["op"]
    },
    "form": {
      "$comment": "This is NOT for validation purposes but for automatic generation of TS types. For more info, please see: https://github.com/w3c/wot-thing-description/pull/1319#issuecomment-994950057",
      "oneOf": [
        { "$ref": "#/definitions/form_element_property" },
        { "$ref": "#/definitions/form_element_action" },
        { "$ref": "#/definitions/form_element_event" },
        { "$ref": "#/definitions/form_element_root" }
      ]
    },
    "property_element": {
      "type": "object",
      "properties": {
        "@type": {
          "$ref": "#/definitions/type_declaration"
        },
        "description": {
          "$ref": "#/definitions/description"
        },
        "descriptions": {
          "$ref": "#/definitions/descriptions"
        },
        "title": {
          "$ref": "#/definitions/title"
        },
        "titles": {
          "$ref": "#/definitions/titles"
        },
        "forms": {
          "type": "array",
          "minItems": 1,
          "items": {
            "$ref": "#/definitions/form_element_property"
          }
        },
        "uriVariables": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/dataSchema"
          }
        },
        "observable": {
          "type": "boolean"
        },
        "writeOnly": {
          "type": "boolean"
        },
        "readOnly": {
          "type": "boolean"
        },
        "oneOf": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/dataSchema"
          }
        },
        "unit": {
          "type": "string"
        },
        "enum": {
          "type": "array",
          "minItems": 1,
          "uniqueItems": true
        },
        "format": {
          "type": "string"
        },
        "const": {},
        "default": {},
        "type": {
          "$ref": "#/definitions/dataSchema-type"
        },
        "items": {
          "oneOf": [
            {
              "$ref": "#/definitions/dataSchema"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/dataSchema"
              }
            }
          ]
        },
        "maxItems": {
          "type": "integer",
          "minimum": 0
        },
        "minItems": {
          "type": "integer",
          "minimum": 0
        },
        "minimum": {
          "type": "number"
        },
        "maximum": {
          "type": "number"
        },
        "exclusiveMinimum": {
          "type": "number"
        },
        "exclusiveMaximum": {
          "type": "number"
        },
        "minLength": {
          "type": "integer",
          "minimum": 0
        },
        "maxLength": {
          "type": "integer",
          "minimum": 0
        },
        "multipleOf": {
          "$ref": "#/definitions/multipleOfDefinition"
        },
        "properties": {
          "additionalProperties": {
            "$ref": "#/definitions/dataSchema"
          }
        },
        "required": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "required": ["forms"],
      "additionalProperties": true
    },
    "action_element": {
      "type": "object",
      "properties": {
        "@type": {
          "$ref": "#/definitions/type_declaration"
        },
        "description": {
          "$ref": "#/definitions/description"
        },
        "descriptions": {
          "$ref": "#/definitions/descriptions"
        },
        "title": {
          "$ref": "#/definitions/title"
        },
        "titles": {
          "$ref": "#/definitions/titles"
        },
        "forms": {
          "type": "array",
          "minItems": 1,
          "items": {
            "$ref": "#/definitions/form_element_action"
          }
        },
        "uriVariables": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/dataSchema"
          }
        },
        "input": {
          "$ref": "#/definitions/dataSchema"
        },
        "output": {
          "$ref": "#/definitions/dataSchema"
        },
        "safe": {
          "type": "boolean"
        },
        "idempotent": {
          "type": "boolean"
        },
        "synchronous": {
          "type": "boolean"
        }
      },
      "required": ["forms"],
      "additionalProperties": true
    },
    "event_element": {
      "type": "object",
      "properties": {
        "@type": {
          "$ref": "#/definitions/type_declaration"
        },
        "description": {
          "$ref": "#/definitions/description"
        },
        "descriptions": {
          "$ref": "#/definitions/descriptions"
        },
        "title": {
          "$ref": "#/definitions/title"
        },
        "titles": {
          "$ref": "#/definitions/titles"
        },
        "forms": {
          "type": "array",
          "minItems": 1,
          "items": {
            "$ref": "#/definitions/form_element_event"
          }
        },
        "uriVariables": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/dataSchema"
          }
        },
        "subscription": {
          "$ref": "#/definitions/dataSchema"
        },
        "data": {
          "$ref": "#/definitions/dataSchema"
        },
        "dataResponse": {
          "$ref": "#/definitions/dataSchema"
        },
        "cancellation": {
          "$ref": "#/definitions/dataSchema"
        }
      },
      "required": ["forms"],
      "additionalProperties": true
    },
    "base_link_element": {
      "type": "object",
      "properties": {
        "href": {
          "$ref": "#/definitions/anyUri"
        },
        "type": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "anchor": {
          "$ref": "#/definitions/anyUri"
        },
        "hreflang": {
          "anyOf": [
            { "$ref": "#/definitions/bcp47_string" },
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/bcp47_string"
              }
            }
          ]
        }
      },
      "required": ["href"],
      "additionalProperties": true
    },
    "link_element": {
      "allOf": [
        {
          "$ref": "#/definitions/base_link_element"
        },
        {
          "not": {
            "description": "A basic link element should not contain sizes",
            "type": "object",
            "properties": {
              "sizes": {}
            },
            "required": ["sizes"]
          }
        },
        {
          "not": {
            "description": "A basic link element should not contain icon or tm:extends",
            "properties": {
              "rel": {
                "enum": ["icon", "tm:extends"]
              }
            },
            "required": ["rel"]
          }
        }
      ]
    },
    "icon_link_element": {
      "allOf": [
        {
          "$ref": "#/definitions/base_link_element"
        },
        {
          "properties": {
            "rel": {
              "const": "icon"
            },
            "sizes": {
              "type": "string",
              "pattern": "[0-9]*x[0-9]+"
            }
          },
          "required": ["rel"]
        }
      ]
    },
    "additionalSecurityScheme": {
      "description": "Applies to additional SecuritySchemes not defined in the WoT TD specification.",
      "$comment": "Additional SecuritySchemes should always be defined via a context extension, using a prefixed value for the scheme. This prefix (e.g. 'ace', see the example below) must contain at least one character in order to reference a valid JSON-LD context extension.",
      "examples": [
        {
          "scheme": "ace:ACESecurityScheme",
          "ace:as": "coaps://as.example.com/token",
          "ace:audience": "coaps://rs.example.com",
          "ace:scopes": ["limited", "special"],
          "ace:cnonce": true
        }
      ],
      "type": "object",
      "properties": {
        "@type": {
          "$ref": "#/definitions/type_declaration"
        },
        "description": {
          "$ref": "#/definitions/description"
        },
        "descriptions": {
          "$ref": "#/definitions/descriptions"
        },
        "proxy": {
          "$ref": "#/definitions/anyUri"
        },
        "scheme": {
          "type": "string",
          "pattern": ".+:.*"
        }
      },
      "required": ["scheme"],
      "additionalProperties": true
    },
    "noSecurityScheme": {
      "type": "object",
      "properties": {
        "@type": {
          "$ref": "#/definitions/type_declaration"
        },
        "description": {
          "$ref": "#/definitions/description"
        },
        "descriptions": {
          "$ref": "#/definitions/descriptions"
        },
        "proxy": {
          "$ref": "#/definitions/anyUri"
        },
        "scheme": {
          "type": "string",
          "enum": ["nosec"]
        }
      },
      "required": ["scheme"],
      "additionalProperties": true
    },
    "autoSecurityScheme": {
      "type": "object",
      "properties": {
        "@type": {
          "$ref": "#/definitions/type_declaration"
        },
        "description": {
          "$ref": "#/definitions/description"
        },
        "descriptions": {
          "$ref": "#/definitions/descriptions"
        },
        "proxy": {
          "$ref": "#/definitions/anyUri"
        },
        "scheme": {
          "type": "string",
          "enum": ["auto"]
        }
      },
      "not": {
        "required": ["name"]
      },
      "required": ["scheme"],
      "additionalProperties": true
    },
    "comboSecurityScheme": {
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "@type": {
              "$ref": "#/definitions/type_declaration"
            },
            "description": {
              "$ref": "#/definitions/description"
            },
            "descriptions": {
              "$ref": "#/definitions/descriptions"
            },
            "proxy": {
              "$ref": "#/definitions/anyUri"
            },
            "scheme": {
              "type": "string",
              "enum": ["combo"]
            },
            "oneOf": {
              "type": "array",
              "minItems": 2,
              "items": {
                "type": "string"
              }
            }
          },
          "required": ["scheme", "oneOf"],
          "additionalProperties": true
        },
        {
          "type": "object",
          "properties": {
            "@type": {
              "$ref": "#/definitions/type_declaration"
            },
            "description": {
              "$ref": "#/definitions/description"
            },
            "descriptions": {
              "$ref": "#/definitions/descriptions"
            },
            "proxy": {
              "$ref": "#/definitions/anyUri"
            },
            "scheme": {
              "type": "string",
              "enum": ["combo"]
            },
            "allOf": {
              "type": "array",
              "minItems": 2,
              "items": {
                "type": "string"
              }
            }
          },
          "required": ["scheme", "allOf"],
          "additionalProperties": true
        }
      ]
    },
    "basicSecurityScheme": {
      "type": "object",
      "properties": {
        "@type": {
          "$ref": "#/definitions/type_declaration"
        },
        "description": {
          "$ref": "#/definitions/description"
        },
        "descriptions": {
          "$ref": "#/definitions/descriptions"
        },
        "proxy": {
          "$ref": "#/definitions/anyUri"
        },
        "scheme": {
          "type": "string",
          "enum": ["basic"]
        },
        "in": {
          "type": "string",
          "enum": ["header", "query", "body", "cookie", "auto"]
        },
        "name": {
          "type": "string"
        }
      },
      "required": ["scheme"],
      "additionalProperties": true
    },
    "digestSecurityScheme": {
      "type": "object",
      "properties": {
        "@type": {
          "$ref": "#/definitions/type_declaration"
        },
        "description": {
          "$ref": "#/definitions/description"
        },
        "descriptions": {
          "$ref": "#/definitions/descriptions"
        },
        "proxy": {
          "$ref": "#/definitions/anyUri"
        },
        "scheme": {
          "type": "string",
          "enum": ["digest"]
        },
        "qop": {
          "type": "string",
          "enum": ["auth", "auth-int"]
        },
        "in": {
          "type": "string",
          "enum": ["header", "query", "body", "cookie", "auto"]
        },
        "name": {
          "type": "string"
        }
      },
      "required": ["scheme"],
      "additionalProperties": true
    },
    "apiKeySecurityScheme": {
      "type": "object",
      "properties": {
        "@type": {
          "$ref": "#/definitions/type_declaration"
        },
        "description": {
          "$ref": "#/definitions/description"
        },
        "descriptions": {
          "$ref": "#/definitions/descriptions"
        },
        "proxy": {
          "$ref": "#/definitions/anyUri"
        },
        "scheme": {
          "type": "string",
          "enum": ["apikey"]
        },
        "in": {
          "type": "string",
          "enum": ["header", "query", "body", "cookie", "uri", "auto"]
        },
        "name": {
          "type": "string"
        }
      },
      "required": ["scheme"],
      "additionalProperties": true
    },
    "bearerSecurityScheme": {
      "type": "object",
      "properties": {
        "@type": {
          "$ref": "#/definitions/type_declaration"
        },
        "description": {
          "$ref": "#/definitions/description"
        },
        "descriptions": {
          "$ref": "#/definitions/descriptions"
        },
        "proxy": {
          "$ref": "#/definitions/anyUri"
        },
        "scheme": {
          "type": "string",
          "enum": ["bearer"]
        },
        "authorization": {
          "$ref": "#/definitions/anyUri"
        },
        "alg": {
          "type": "string"
        },
        "format": {
          "type": "string"
        },
        "in": {
          "type": "string",
          "enum": ["header", "query", "body", "cookie", "auto"]
        },
        "name": {
          "type": "string"
        }
      },
      "required": ["scheme"],
      "additionalProperties": true
    },
    "pskSecurityScheme": {
      "type": "object",
      "properties": {
        "@type": {
          "$ref": "#/definitions/type_declaration"
        },
        "description": {
          "$ref": "#/definitions/description"
        },
        "descriptions": {
          "$ref": "#/definitions/descriptions"
        },
        "proxy": {
          "$ref": "#/definitions/anyUri"
        },
        "scheme": {
          "type": "string",
          "enum": ["psk"]
        },
        "identity": {
          "type": "string"
        }
      },
      "required": ["scheme"],
      "additionalProperties": true
    },
    "oAuth2SecurityScheme": {
      "type": "object",
      "properties": {
        "@type": {
          "$ref": "#/definitions/type_declaration"
        },
        "description": {
          "$ref": "#/definitions/description"
        },
        "descriptions": {
          "$ref": "#/definitions/descriptions"
        },
        "proxy": {
          "$ref": "#/definitions/anyUri"
        },
        "scheme": {
          "type": "string",
          "enum": ["oauth2"]
        },
        "authorization": {
          "$ref": "#/definitions/anyUri"
        },
        "token": {
          "$ref": "#/definitions/anyUri"
        },
        "refresh": {
          "$ref": "#/definitions/anyUri"
        },
        "scopes": {
          "oneOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string"
            }
          ]
        },
        "flow": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "string",
              "enum": ["code", "client", "device"]
            }
          ]
        }
      },
      "required": ["scheme"],
      "additionalProperties": true
    },
    "securityScheme": {
      "oneOf": [
        {
          "$ref": "#/definitions/noSecurityScheme"
        },
        {
          "$ref": "#/definitions/autoSecurityScheme"
        },
        {
          "$ref": "#/definitions/comboSecurityScheme"
        },
        {
          "$ref": "#/definitions/basicSecurityScheme"
        },
        {
          "$ref": "#/definitions/digestSecurityScheme"
        },
        {
          "$ref": "#/definitions/apiKeySecurityScheme"
        },
        {
          "$ref": "#/definitions/bearerSecurityScheme"
        },
        {
          "$ref": "#/definitions/pskSecurityScheme"
        },
        {
          "$ref": "#/definitions/oAuth2SecurityScheme"
        },
        {
          "$ref": "#/definitions/additionalSecurityScheme"
        }
      ]
    }
  },
  "type": "object",
  "properties": {
    "id": {
      "type": "string",
      "format": "uri"
    },
    "title": {
      "$ref": "#/definitions/title"
    },
    "titles": {
      "$ref": "#/definitions/titles"
    },
    "properties": {
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/property_element"
      }
    },
    "actions": {
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/action_element"
      }
    },
    "events": {
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/event_element"
      }
    },
    "description": {
      "$ref": "#/definitions/description"
    },
    "descriptions": {
      "$ref": "#/definitions/descriptions"
    },
    "version": {
      "type": "object",
      "properties": {
        "instance": {
          "type": "string"
        }
      },
      "required": ["instance"]
    },
    "links": {
      "type": "array",
      "items": {
        "oneOf": [
          {
            "$ref": "#/definitions/link_element"
          },
          {
            "$ref": "#/definitions/icon_link_element"
          }
        ]
      }
    },
    "forms": {
      "type": "array",
      "minItems": 1,
      "items": {
        "$ref": "#/definitions/form_element_root"
      }
    },
    "base": {
      "$ref": "#/definitions/anyUri"
    },
    "securityDefinitions": {
      "type": "object",
      "minProperties": 1,
      "additionalProperties": {
        "$ref": "#/definitions/securityScheme"
      }
    },
    "schemaDefinitions": {
      "type": "object",
      "minProperties": 1,
      "additionalProperties": {
        "$ref": "#/definitions/dataSchema"
      }
    },
    "support": {
      "$ref": "#/definitions/anyUri"
    },
    "created": {
      "type": "string",
      "format": "date-time"
    },
    "modified": {
      "type": "string",
      "format": "date-time"
    },
    "profile": {
      "oneOf": [
        {
          "$ref": "#/definitions/anyUri"
        },
        {
          "type": "array",
          "minItems": 1,
          "items": {
            "$ref": "#/definitions/anyUri"
          }
        }
      ]
    },
    "security": {
      "oneOf": [
        {
          "type": "string"
        },
        {
          "type": "array",
          "minItems": 1,
          "items": {
            "type": "string"
          }
        }
      ]
    },
    "uriVariables": {
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/dataSchema"
      }
    },
    "@type": {
      "$ref": "#/definitions/type_declaration"
    },
    "@context": {
      "$ref": "#/definitions/thing-context"
    }
  },
  "required": ["title", "security", "securityDefinitions", "@context"],
  "additionalProperties": true
}


},{}],2:[function(require,module,exports){
const jsonMap = require('json-source-map')

module.exports.configure = configure
module.exports.checkTypos = checkTypos 

const REF = "$ref"
const PROPERTIES = "properties"
const PATTERN_PROPERTIES = "patternProperties"
const ADDITONAL_PROPERTIES = "additionalProperties"
const PATH = "#/"

let SCHEMA = require('./examples/schema/td-schema.json')
// Minimum similarity value to be able to say that two words are similar
let SIMILARITY_THRESHOLD = 0.85
// Maximum value of length difference between two words
let MAX_LENGTH_DIFFERENCE = 2
let TYPO_LOOKUP_TABLE = createSchemaLookupTable(SCHEMA)


/**
 * Configures the settings of the spell checker
 * @param {*} similarityThreshold Threshold that decides whether the words are similar or not. 
 * @param {*} maxLengthDifference Maximum value of the length difference of words to run the algorithm
 */
function configure(schema = SCHEMA, similarityThreshold = SIMILARITY_THRESHOLD, maxLengthDifference = MAX_LENGTH_DIFFERENCE) {
    SCHEMA = schema
    TYPO_LOOKUP_TABLE = createSchemaLookupTable(SCHEMA)
    SIMILARITY_THRESHOLD = similarityThreshold
    MAX_LENGTH_DIFFERENCE = maxLengthDifference
}

/**
 * Checks possible typos in a stringified JSON
 * @param {object} json The JSON to apply typo check on
 * @returns List of possible typos where the typo consists of string value of typo itself and the message,
 * another string value, to be prompted to the user for the fix
 */
function checkTypos(json) {
    const typos = []

    const lookupTable = TYPO_LOOKUP_TABLE
    const searchDepth = 1
    const searchPath = PATH
    let parsedJson = {}

    try {
        parsedJson = JSON.parse(json)
    } catch (err) {
        return typos
    }

    searchTypos(typos, parsedJson, lookupTable, searchDepth, searchPath, searchPath)
    
    const mappedJson = jsonMap.parse(json)
    const pointers = mappedJson.pointers
    
    typos.forEach(typo => {
        const pointer = pointers[typo.path.substr(1, typo.path.length - 2)]

        if (pointer) {
            // Every pointer get plus 1 because indexes start from 0
            typo.startLineNumber = pointer.key.line + 1
            typo.endLineNumber = pointer.keyEnd.line + 1
            typo.startColumn = (pointer.key.column + 1) + 1
            typo.endColumn = (pointer.keyEnd.column + 1) - 1
        }
    })

    return typos
}

/**
 * Searching typos on a specific path and depth
 * @param {Array} typos The list that typo objects are stored
 * @param {object} json The JSON to apply typo check on
 * @param {Map} lookupTable The map that stores paths and their available word list according to their path depth
 * @param {integer} searchDepth The integer that decides the depth of the typo check search
 * @param {string} searchPath The string that decided the path of the typo check search
 */
function searchTypos(typos, json, lookupTable, searchDepth, searchPath, realPath) {
    if (typeof json !== 'object') {
        return
    }

    for (const key in json) {
        const pathMap = lookupTable.get(searchDepth)
        const wordSet = pathMap.get(searchPath)

        if (!wordSet) {
            if (!searchPath.endsWith('*/')) {
                searchTypos(typos, json[key], lookupTable, searchDepth + 1, searchPath + '*/', realPath + `${key}/`)
                continue
            } else {
                continue
            }
        }

        if (json.hasOwnProperty(key)) { 
            searchTypos(typos, json[key], lookupTable, searchDepth + 1, searchPath + `${key}/`, realPath + `${key}/`)

            if (!wordSet || wordSet.has(key)) {
                continue
            }

            wordSet.forEach(word => {
                if (doesTypoExist(key, word)) {
                    typos.push({
                        path: `${realPath}${key}/`,
                        word: key,
                        desiredWord: word,
                        message: `Did you mean ${word}?`
                    })

                    return
                }
            })
        }
    }
}

/**
 * Creates a lookup table using JSON schema
 * @param {object} jsonSchema JSON Schema to create a lookup table from
 * @returns The map that constructs lookup table for typo check using JSON Schema
 */
function createSchemaLookupTable(jsonSchema) {
    const lookupTable = new Map()
    const filteredLookupTable = new Map()

    findPathsInSchema(jsonSchema, PATH, '', lookupTable)

    lookupTable.forEach((value, key) => {
        if (value.size > 0) {
            const pathDepth = (key.match(/\//ig) || []).length

            let pathDepthMap = filteredLookupTable.get(pathDepth)

            if (pathDepthMap) {
                pathDepthMap.set(key.replace(/^r/g, ''), value)
                filteredLookupTable.set(pathDepth, pathDepthMap)
            } else {
                pathDepthMap = new Map()
                pathDepthMap.set(key.replace(/^r/g, ''), value)
                filteredLookupTable.set(pathDepth, pathDepthMap)
            }
        }
    })

    return filteredLookupTable
}

/**
 * Finds the paths under a parent path by parsing schema and adds them to a lookup table
 * @param {object} schema The schema to find the paths from
 * @param {string} path The parent path that search is going under
 * @param {string} references All of the reference paths used
 * @param {Map} lookupTable The map that stores the paths in the schema
 */
function findPathsInSchema(schema, path, references, lookupTable) {
    const keys = new Set()

    if (schema[REF]) {

        if (path[0] === 'r' && references.includes(schema[REF])) {
            return
        }

        if (references.includes(schema[REF])) {
            // Add 'r'  to the path, so in future we could check for recursive ref paths
            path = 'r' + path
        }

        findPathsInSchema(getRefObjectOfSchema(SCHEMA, schema[REF]), path, references + `${schema[REF]},`, lookupTable)
    }

    if (schema.type === 'object') {
        const properties = schema[PROPERTIES]
        for (const key in properties) {
            if (properties.hasOwnProperty(key)) {
                if (key === REF) {
                    
                    if (path[0] === 'r' && references.includes(properties[key])) {
                        continue
                    }

                    if (references.includes(properties[key])) {
                        // Add 'r'  to the path, so in future we could check for recursive ref paths
                        path = 'r' + path
                    }

                    findPathsInSchema(getRefObjectOfSchema(SCHEMA, properties[key]), path, references + `${properties[key]},`, lookupTable)
                } else {
                    findPathsInSchema(properties[key], `${path}${key}/`, references, lookupTable)
                    keys.add(key)
                }
            }
        }

        const additionalProperties = schema[ADDITONAL_PROPERTIES]
        for (const key in additionalProperties) {
            if (additionalProperties.hasOwnProperty(key)) {
                if (key === REF) {
                    if (path[0] === 'r' && references.includes(additionalProperties[key])) {
                        continue
                    }

                    if (references.includes(additionalProperties[key])) {
                        path = 'r' + path
                    }

                    findPathsInSchema(getRefObjectOfSchema(SCHEMA, additionalProperties[key]), `${path}*/`, references + `${additionalProperties[key]},`, lookupTable)
                }
            }
        }

        const patternProperties = schema[PATTERN_PROPERTIES]
        for (const key in patternProperties) {
            if (patternProperties.hasOwnProperty(key)) {
                if (key === REF) {
                    if (path[0] === 'r' && references.includes(patternProperties[key])) {
                        continue
                    }

                    if (references.includes(patternProperties[key])) {
                        // Add 'r'  to the path, so in future we could check for recursive ref paths
                        path = 'r' + path
                    }

                    findPathsInSchema(getRefObjectOfSchema(SCHEMA, patternProperties[key]), `${path}*/`, references + `${patternProperties[key]},`, lookupTable)
                } else {
                    findPathsInSchema(patternProperties[key], `${path}*/`, references, lookupTable)
                }
            }
        }

        putKeysToPath(lookupTable, path, keys)
    }

    if (schema.type === 'array') {
        const items = schema.items

        for (const item in items) {
            if (items.hasOwnProperty(item)) {
                if (item === REF) {
                    if (path[0] === 'r' && references.includes(items[item])) {
                        continue
                    }

                    if (references.includes(items[item])) {
                        // Add 'r'  to the path, so in future we could check for recursive ref paths
                        path = 'r' + path
                    }

                    findPathsInSchema(getRefObjectOfSchema(SCHEMA, items[item]), `${path}*/`, references + `${items[item]},`, lookupTable)
                }
            }
        }

        putKeysToPath(lookupTable, path, keys)
    }

    for (const key in schema) {
        if (schema.hasOwnProperty(key)) {
            if (['allOf', 'oneOf', 'anyOf'].includes(key)) {
                if (Array.isArray(schema[key])) {
                    schema[key].forEach(element => {
                        findPathsInSchema(element, path, references, lookupTable)
                    })
                }
            }
        }
    }
}

/**
 * Stores the keys under a specific path
 * @param {Map} lookupTable The map that stores the paths in the schema
 * @param {string} path The path that is owner of the current keys
 * @param {Set} keys The set of keys that is going to be put
 */
function putKeysToPath(lookupTable, path, keys) {
    pathKeys = lookupTable.get(path)

    if (pathKeys) {
        const union = new Set(pathKeys)
        keys.forEach(k => {
            union.add(k)
        })

        lookupTable.set(path, union)
    } else {
        lookupTable.set(path, keys)
    }
}

/**
 * Gets the reference object in the schema
 * @param {object} schema The object that represent the schema
 * @param {string} ref The reference value in the schema
 * @returns The reference object the ref maps to
 */
function getRefObjectOfSchema(schema, ref) {
    const splitRef = ref.split('/')
    if (splitRef[0] !== '#') {
        console.log('Parsing not implemented for between files')
        return
    }

    let result = schema

    for (let i = 1; i < splitRef.length; i++) {
        result = result[splitRef[i]]
    }

    return result
}

/**
 * Checks whether typo exists or not by comparing similarity of the two words
 * @param {string} actual The property name of the JSON entered by user
 * @param {string} desired The desired property name that is retrieved from JSON Schema
 * @returns Boolean value that tell whether typo exists or not
 */
function doesTypoExist(actual, desired) {
    if (Math.abs(actual.length - desired.length) > MAX_LENGTH_DIFFERENCE) {
        return false
    }

    const similarity = calculateSimilarity(actual, desired)
    return similarity > SIMILARITY_THRESHOLD && similarity !== 1.0
}

/**
 * Similarity of words calculated using Jaro-Winkler algorithm
 * @param {string} actual The property name of the JSON entered by user
 * @param {string} desired The desired propert name that is retrieved from JSON Schema
 * @returns Similarity of value the two inputs
 */
function calculateSimilarity(actual, desired) {
    let m = 0

    if (actual.length === 0 || desired.length === 0) {
        return 0
    }

    if (actual === desired) {
        return 1
    }

    const range = Math.floor(Math.max(actual.length, desired.length) / 2) - 1
    const actualMatches = new Array(actual.length)
    const desiredMatches = new Array(desired.length)

    // check lower and upper bounds to find the matches
    for (let i = 0; i < actual.length; i++) {
        const lowerBound = (i >= range) ? i - range : 0
        const upperBound = (i + range <= desired.length) ? (i + range) : (desired.length - 1)

        for (let j = lowerBound; j <= upperBound; j++) {
            if (actualMatches[i] !== true && desiredMatches[j] !== true && actual[i] === desired[j]) {
                m++
                actualMatches[i] = desiredMatches[j] = true
                break
            }
        }
    }

    if (m === 0) {
        return 0
    }

    let k = 0
    let transpositionCount = 0

    // count transpositions
    for (let i = 0; i < actual.length; i++) {
        if (actualMatches[i] === true) {
            let j = 0
            for (j = k; j < desired.length; j++) {
                if (desiredMatches[j] === true) {
                    k = j + 1
                    break
                }
            }

            if (actual[i] !== desired[j]) {
                transpositionCount++
            }
        }
    }

    let similarity = ((m / actual.length) + (m / desired.length) + ((m - (transpositionCount / 2)) / m)) / 3
    let l = 0
    const p = 0.1

    // strengthen the similarity if the words start with same letters
    if (similarity < 0.7) {
        while (actual[l] === desired[l] && l < 4) {
            l++
        }

        similarity += l * p * (1 - similarity)
    }

    return similarity
}
},{"./examples/schema/td-schema.json":1,"json-source-map":3}],3:[function(require,module,exports){
'use strict';

var escapedChars = {
  'b': '\b',
  'f': '\f',
  'n': '\n',
  'r': '\r',
  't': '\t',
  '"': '"',
  '/': '/',
  '\\': '\\'
};

var A_CODE = 'a'.charCodeAt();


exports.parse = function (source, _, options) {
  var pointers = {};
  var line = 0;
  var column = 0;
  var pos = 0;
  var bigint = options && options.bigint && typeof BigInt != 'undefined';
  return {
    data: _parse('', true),
    pointers: pointers
  };

  function _parse(ptr, topLevel) {
    whitespace();
    var data;
    map(ptr, 'value');
    var char = getChar();
    switch (char) {
      case 't': read('rue'); data = true; break;
      case 'f': read('alse'); data = false; break;
      case 'n': read('ull'); data = null; break;
      case '"': data = parseString(); break;
      case '[': data = parseArray(ptr); break;
      case '{': data = parseObject(ptr); break;
      default:
        backChar();
        if ('-0123456789'.indexOf(char) >= 0)
          data = parseNumber();
        else
          unexpectedToken();
    }
    map(ptr, 'valueEnd');
    whitespace();
    if (topLevel && pos < source.length) unexpectedToken();
    return data;
  }

  function whitespace() {
    loop:
      while (pos < source.length) {
        switch (source[pos]) {
          case ' ': column++; break;
          case '\t': column += 4; break;
          case '\r': column = 0; break;
          case '\n': column = 0; line++; break;
          default: break loop;
        }
        pos++;
      }
  }

  function parseString() {
    var str = '';
    var char;
    while (true) {
      char = getChar();
      if (char == '"') {
        break;
      } else if (char == '\\') {
        char = getChar();
        if (char in escapedChars)
          str += escapedChars[char];
        else if (char == 'u')
          str += getCharCode();
        else
          wasUnexpectedToken();
      } else {
        str += char;
      }
    }
    return str;
  }

  function parseNumber() {
    var numStr = '';
    var integer = true;
    if (source[pos] == '-') numStr += getChar();

    numStr += source[pos] == '0'
              ? getChar()
              : getDigits();

    if (source[pos] == '.') {
      numStr += getChar() + getDigits();
      integer = false;
    }

    if (source[pos] == 'e' || source[pos] == 'E') {
      numStr += getChar();
      if (source[pos] == '+' || source[pos] == '-') numStr += getChar();
      numStr += getDigits();
      integer = false;
    }

    var result = +numStr;
    return bigint && integer && (result > Number.MAX_SAFE_INTEGER || result < Number.MIN_SAFE_INTEGER)
            ? BigInt(numStr)
            : result;
  }

  function parseArray(ptr) {
    whitespace();
    var arr = [];
    var i = 0;
    if (getChar() == ']') return arr;
    backChar();

    while (true) {
      var itemPtr = ptr + '/' + i;
      arr.push(_parse(itemPtr));
      whitespace();
      var char = getChar();
      if (char == ']') break;
      if (char != ',') wasUnexpectedToken();
      whitespace();
      i++;
    }
    return arr;
  }

  function parseObject(ptr) {
    whitespace();
    var obj = {};
    if (getChar() == '}') return obj;
    backChar();

    while (true) {
      var loc = getLoc();
      if (getChar() != '"') wasUnexpectedToken();
      var key = parseString();
      var propPtr = ptr + '/' + escapeJsonPointer(key);
      mapLoc(propPtr, 'key', loc);
      map(propPtr, 'keyEnd');
      whitespace();
      if (getChar() != ':') wasUnexpectedToken();
      whitespace();
      obj[key] = _parse(propPtr);
      whitespace();
      var char = getChar();
      if (char == '}') break;
      if (char != ',') wasUnexpectedToken();
      whitespace();
    }
    return obj;
  }

  function read(str) {
    for (var i=0; i<str.length; i++)
      if (getChar() !== str[i]) wasUnexpectedToken();
  }

  function getChar() {
    checkUnexpectedEnd();
    var char = source[pos];
    pos++;
    column++; // new line?
    return char;
  }

  function backChar() {
    pos--;
    column--;
  }

  function getCharCode() {
    var count = 4;
    var code = 0;
    while (count--) {
      code <<= 4;
      var char = getChar().toLowerCase();
      if (char >= 'a' && char <= 'f')
        code += char.charCodeAt() - A_CODE + 10;
      else if (char >= '0' && char <= '9')
        code += +char;
      else
        wasUnexpectedToken();
    }
    return String.fromCharCode(code);
  }

  function getDigits() {
    var digits = '';
    while (source[pos] >= '0' && source[pos] <= '9')
      digits += getChar();

    if (digits.length) return digits;
    checkUnexpectedEnd();
    unexpectedToken();
  }

  function map(ptr, prop) {
    mapLoc(ptr, prop, getLoc());
  }

  function mapLoc(ptr, prop, loc) {
    pointers[ptr] = pointers[ptr] || {};
    pointers[ptr][prop] = loc;
  }

  function getLoc() {
    return {
      line: line,
      column: column,
      pos: pos
    };
  }

  function unexpectedToken() {
    throw new SyntaxError('Unexpected token ' + source[pos] + ' in JSON at position ' + pos);
  }

  function wasUnexpectedToken() {
    backChar();
    unexpectedToken();
  }

  function checkUnexpectedEnd() {
    if (pos >= source.length)
      throw new SyntaxError('Unexpected end of JSON input');
  }
};


exports.stringify = function (data, _, options) {
  if (!validType(data)) return;
  var wsLine = 0;
  var wsPos, wsColumn;
  var whitespace = typeof options == 'object'
                    ? options.space
                    : options;
  switch (typeof whitespace) {
    case 'number':
      var len = whitespace > 10
                  ? 10
                  : whitespace < 0
                    ? 0
                    : Math.floor(whitespace);
      whitespace = len && repeat(len, ' ');
      wsPos = len;
      wsColumn = len;
      break;
    case 'string':
      whitespace = whitespace.slice(0, 10);
      wsPos = 0;
      wsColumn = 0;
      for (var j=0; j<whitespace.length; j++) {
        var char = whitespace[j];
        switch (char) {
          case ' ': wsColumn++; break;
          case '\t': wsColumn += 4; break;
          case '\r': wsColumn = 0; break;
          case '\n': wsColumn = 0; wsLine++; break;
          default: throw new Error('whitespace characters not allowed in JSON');
        }
        wsPos++;
      }
      break;
    default:
      whitespace = undefined;
  }

  var json = '';
  var pointers = {};
  var line = 0;
  var column = 0;
  var pos = 0;
  var es6 = options && options.es6 && typeof Map == 'function';
  _stringify(data, 0, '');
  return {
    json: json,
    pointers: pointers
  };

  function _stringify(_data, lvl, ptr) {
    map(ptr, 'value');
    switch (typeof _data) {
      case 'number':
      case 'bigint':
      case 'boolean':
        out('' + _data); break;
      case 'string':
        out(quoted(_data)); break;
      case 'object':
        if (_data === null) {
          out('null');
        } else if (typeof _data.toJSON == 'function') {
          out(quoted(_data.toJSON()));
        } else if (Array.isArray(_data)) {
          stringifyArray();
        } else if (es6) {
          if (_data.constructor.BYTES_PER_ELEMENT)
            stringifyArray();
          else if (_data instanceof Map)
            stringifyMapSet();
          else if (_data instanceof Set)
            stringifyMapSet(true);
          else
            stringifyObject();
        } else {
          stringifyObject();
        }
    }
    map(ptr, 'valueEnd');

    function stringifyArray() {
      if (_data.length) {
        out('[');
        var itemLvl = lvl + 1;
        for (var i=0; i<_data.length; i++) {
          if (i) out(',');
          indent(itemLvl);
          var item = validType(_data[i]) ? _data[i] : null;
          var itemPtr = ptr + '/' + i;
          _stringify(item, itemLvl, itemPtr);
        }
        indent(lvl);
        out(']');
      } else {
        out('[]');
      }
    }

    function stringifyObject() {
      var keys = Object.keys(_data);
      if (keys.length) {
        out('{');
        var propLvl = lvl + 1;
        for (var i=0; i<keys.length; i++) {
          var key = keys[i];
          var value = _data[key];
          if (validType(value)) {
            if (i) out(',');
            var propPtr = ptr + '/' + escapeJsonPointer(key);
            indent(propLvl);
            map(propPtr, 'key');
            out(quoted(key));
            map(propPtr, 'keyEnd');
            out(':');
            if (whitespace) out(' ');
            _stringify(value, propLvl, propPtr);
          }
        }
        indent(lvl);
        out('}');
      } else {
        out('{}');
      }
    }

    function stringifyMapSet(isSet) {
      if (_data.size) {
        out('{');
        var propLvl = lvl + 1;
        var first = true;
        var entries = _data.entries();
        var entry = entries.next();
        while (!entry.done) {
          var item = entry.value;
          var key = item[0];
          var value = isSet ? true : item[1];
          if (validType(value)) {
            if (!first) out(',');
            first = false;
            var propPtr = ptr + '/' + escapeJsonPointer(key);
            indent(propLvl);
            map(propPtr, 'key');
            out(quoted(key));
            map(propPtr, 'keyEnd');
            out(':');
            if (whitespace) out(' ');
            _stringify(value, propLvl, propPtr);
          }
          entry = entries.next();
        }
        indent(lvl);
        out('}');
      } else {
        out('{}');
      }
    }
  }

  function out(str) {
    column += str.length;
    pos += str.length;
    json += str;
  }

  function indent(lvl) {
    if (whitespace) {
      json += '\n' + repeat(lvl, whitespace);
      line++;
      column = 0;
      while (lvl--) {
        if (wsLine) {
          line += wsLine;
          column = wsColumn;
        } else {
          column += wsColumn;
        }
        pos += wsPos;
      }
      pos += 1; // \n character
    }
  }

  function map(ptr, prop) {
    pointers[ptr] = pointers[ptr] || {};
    pointers[ptr][prop] = {
      line: line,
      column: column,
      pos: pos
    };
  }

  function repeat(n, str) {
    return Array(n + 1).join(str);
  }
};


var VALID_TYPES = ['number', 'bigint', 'boolean', 'string', 'object'];
function validType(data) {
  return VALID_TYPES.indexOf(typeof data) >= 0;
}


var ESC_QUOTE = /"|\\/g;
var ESC_B = /[\b]/g;
var ESC_F = /\f/g;
var ESC_N = /\n/g;
var ESC_R = /\r/g;
var ESC_T = /\t/g;
function quoted(str) {
  str = str.replace(ESC_QUOTE, '\\$&')
           .replace(ESC_F, '\\f')
           .replace(ESC_B, '\\b')
           .replace(ESC_N, '\\n')
           .replace(ESC_R, '\\r')
           .replace(ESC_T, '\\t');
  return '"' + str + '"';
}


var ESC_0 = /~/g;
var ESC_1 = /\//g;
function escapeJsonPointer(str) {
  return str.replace(ESC_0, '~0')
            .replace(ESC_1, '~1');
}

},{}]},{},[2])(2)
});
