"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AssetInterfaceDescriptionUtil = void 0;
const debug_1 = __importDefault(require("debug"));
const namespace = "node-wot:td-tools:asset-interface-description-util";
const logDebug = (0, debug_1.default)(`${namespace}:debug`);
const logInfo = (0, debug_1.default)(`${namespace}:info`);
const noSecSS = { scheme: "nosec" };
const noSecName = 0 + "_sc";
class AssetInterfaceDescriptionUtil {
    getBaseFromEndpointMetadata(endpointMetadata) {
        if ((endpointMetadata === null || endpointMetadata === void 0 ? void 0 : endpointMetadata.value) && endpointMetadata.value instanceof Array) {
            for (const v of endpointMetadata.value) {
                if (v.idShort === "base") {
                    return v.value;
                }
            }
        }
        return "undefined";
    }
    getContentTypeFromEndpointMetadata(endpointMetadata) {
        if ((endpointMetadata === null || endpointMetadata === void 0 ? void 0 : endpointMetadata.value) && endpointMetadata.value instanceof Array) {
            for (const v of endpointMetadata.value) {
                if (v.idShort === "contentType") {
                    return v.value;
                }
            }
        }
        return "";
    }
    getSecuritySchemesFromEndpointMetadata(endpointMetadata) {
        if ((endpointMetadata === null || endpointMetadata === void 0 ? void 0 : endpointMetadata.value) && endpointMetadata.value instanceof Array) {
            for (const v of endpointMetadata.value) {
                if (v.idShort === "securityDefinitions") {
                    const securitySchemes = [];
                    if (v.value && v.value instanceof Array) {
                        for (const secValue of v.value) {
                            const ss = { scheme: secValue.idShort };
                            securitySchemes.push(ss);
                            if (secValue.value && secValue.value instanceof Array) {
                                for (const v of secValue.value) {
                                    if (v.idShort && typeof v.idShort === "string" && v.idShort.length > 0 && v.value) {
                                        ss[v.idShort] = v.value;
                                    }
                                }
                            }
                        }
                    }
                    return securitySchemes;
                }
            }
        }
        return undefined;
    }
    createInteractionForm(vi, addSecurity) {
        const form = {
            href: this.getBaseFromEndpointMetadata(vi.endpointMetadata),
            contentType: this.getContentTypeFromEndpointMetadata(vi.endpointMetadata),
        };
        if (addSecurity) {
            const securitySchemes = this.getSecuritySchemesFromEndpointMetadata(vi.endpointMetadata);
            if (securitySchemes === undefined) {
                form.security = [noSecName];
            }
            else {
                if (vi.secNamesForEndpoint) {
                    form.security = vi.secNamesForEndpoint;
                }
            }
        }
        if (vi.interaction.value instanceof Array) {
            for (const v of vi.interaction.value) {
                if (v.idShort === "href") {
                    if (form.href && form.href.length > 0) {
                        form.href = form.href + v.value;
                    }
                    else {
                        form.href = v.value;
                    }
                }
                else if (typeof v.idShort === "string" && v.idShort.length > 0) {
                    if (v.value) {
                        form[v.idShort] = v.value;
                        if (v.valueType &&
                            v.valueType &&
                            v.valueType.dataObjectType &&
                            v.valueType.dataObjectType.name &&
                            typeof v.valueType.dataObjectType.name === "string") {
                            switch (v.valueType.dataObjectType.name) {
                                case "boolean":
                                    form[v.idShort] = form[v.idShort] === "true";
                                    break;
                                case "float":
                                case "double":
                                case "decimal":
                                case "integer":
                                case "nonPositiveInteger":
                                case "negativeInteger":
                                case "long":
                                case "int":
                                case "short":
                                case "byte":
                                case "nonNegativeInteger":
                                case "unsignedLong":
                                case "unsignedInt":
                                case "unsignedShort":
                                case "unsignedByte":
                                case "positiveInteger":
                                    form[v.idShort] = Number(form[v.idShort]);
                                    break;
                            }
                        }
                    }
                }
            }
        }
        return form;
    }
    processSubmodel(smInformation, submodel, submodelRegex) {
        if (submodel instanceof Object && submodel.idShort && submodel.idShort === "AssetInterfaceDescription") {
            if (submodel.submodelElements && submodel.submodelElements instanceof Array) {
                for (const submodelElement of submodel.submodelElements) {
                    if (submodelElement instanceof Object) {
                        logDebug("SubmodelElement.idShort: " + submodelElement.idShort);
                        if (submodelRegex && typeof submodelRegex === "string" && submodelRegex.length > 0) {
                            const regex = new RegExp(submodelRegex);
                            if (!regex.test(submodelElement.idShort)) {
                                logInfo("submodel not of interest");
                                continue;
                            }
                        }
                        this.processSubmodelElement(smInformation, submodelElement);
                    }
                }
            }
        }
    }
    processSubmodelElement(smInformation, submodelElement) {
        var _a, _b, _c;
        if (submodelElement.value && submodelElement.value instanceof Array) {
            let endpointMetadata = {};
            for (const smValue of submodelElement.value) {
                if (smValue instanceof Object) {
                    if (smValue.idShort === "EndpointMetadata") {
                        logInfo("EndpointMetadata");
                        endpointMetadata = smValue;
                        smInformation.endpointMetadataArray.push(endpointMetadata);
                    }
                }
            }
            for (const smValue of submodelElement.value) {
                if (smValue instanceof Object) {
                    if (smValue.idShort === "InterfaceMetadata") {
                        logInfo("InterfaceMetadata");
                        if (smValue.value && smValue.value instanceof Array) {
                            for (const interactionValue of smValue.value) {
                                if (interactionValue.idShort === "Properties") {
                                    if (interactionValue.value instanceof Array) {
                                        for (const iValue of interactionValue.value) {
                                            logInfo("Property: " + iValue.idShort);
                                            if (!smInformation.properties.has(iValue.idShort)) {
                                                smInformation.properties.set(iValue.idShort, []);
                                            }
                                            const propInter = {
                                                endpointMetadata: endpointMetadata,
                                                interaction: iValue,
                                            };
                                            (_a = smInformation.properties.get(iValue.idShort)) === null || _a === void 0 ? void 0 : _a.push(propInter);
                                        }
                                    }
                                }
                                else if (interactionValue.idShort === "Operations") {
                                    if (interactionValue.value instanceof Array) {
                                        for (const iValue of interactionValue.value) {
                                            logInfo("Action: " + iValue.idShort);
                                            if (!smInformation.actions.has(iValue.idShort)) {
                                                smInformation.actions.set(iValue.idShort, []);
                                            }
                                            const actInter = {
                                                endpointMetadata: endpointMetadata,
                                                interaction: iValue,
                                            };
                                            (_b = smInformation.actions.get(iValue.idShort)) === null || _b === void 0 ? void 0 : _b.push(actInter);
                                        }
                                    }
                                }
                                else if (interactionValue.idShort === "Events") {
                                    if (interactionValue.value instanceof Array) {
                                        for (const iValue of interactionValue.value) {
                                            logInfo("Event: " + iValue.idShort);
                                            if (!smInformation.events.has(iValue.idShort)) {
                                                smInformation.events.set(iValue.idShort, []);
                                            }
                                            const evInter = {
                                                endpointMetadata: endpointMetadata,
                                                interaction: iValue,
                                            };
                                            (_c = smInformation.events.get(iValue.idShort)) === null || _c === void 0 ? void 0 : _c.push(evInter);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    getSubmodelInformation(aas, submodelRegex) {
        const aidModel = JSON.parse(aas);
        const smInformation = {
            actions: new Map(),
            events: new Map(),
            properties: new Map(),
            endpointMetadataArray: [],
        };
        if (aidModel instanceof Object && aidModel.submodels) {
            if (aidModel.submodels instanceof Array) {
                for (const submodel of aidModel.submodels) {
                    this.processSubmodel(smInformation, submodel, submodelRegex);
                }
            }
        }
        return smInformation;
    }
    _transform(smInformation, template) {
        const thing = template ? JSON.parse(template) : {};
        if (!thing["@context"]) {
            thing["@context"] = "https://www.w3.org/2022/wot/td/v1.1";
        }
        if (!thing.title) {
            thing.title = "?TODO?";
        }
        if (!thing.securityDefinitions) {
            thing.securityDefinitions = {};
        }
        let cnt = 1;
        const secSchemeNamesAll = new Array();
        const secNamesForEndpointMetadata = new Map();
        for (const endpointMetadata of smInformation.endpointMetadataArray) {
            const secNames = [];
            const securitySchemes = this.getSecuritySchemesFromEndpointMetadata(endpointMetadata);
            if (securitySchemes === undefined) {
                thing.securityDefinitions[noSecName] = noSecSS;
                secSchemeNamesAll.push(noSecName);
                secNames.push(noSecName);
            }
            else {
                for (const secScheme of securitySchemes) {
                    const secName = cnt + "_sc";
                    thing.securityDefinitions[secName] = secScheme;
                    secSchemeNamesAll.push(secName);
                    secNames.push(secName);
                    cnt++;
                }
            }
            secNamesForEndpointMetadata.set(endpointMetadata, secNames);
        }
        if (secSchemeNamesAll.length === 0) {
            thing.securityDefinitions.nosec_sc = noSecSS;
            thing.security = [noSecName];
        }
        else {
            thing.security = secSchemeNamesAll;
        }
        logDebug("########### PROPERTIES (" + smInformation.properties.size + ")");
        if (smInformation.properties.size > 0) {
            thing.properties = {};
            for (const entry of smInformation.properties.entries()) {
                const key = entry[0];
                const value = entry[1];
                logInfo("Property" + key + " = " + value);
                thing.properties[key] = {};
                thing.properties[key].forms = [];
                for (const vi of value) {
                    if (vi.interaction.constraints && vi.interaction.constraints instanceof Array) {
                        for (const constraint of vi.interaction.constraints)
                            if (constraint.type === "valueType") {
                                if (constraint.value === "float") {
                                    thing.properties[key].type = "number";
                                }
                                else {
                                    thing.properties[key].type = constraint.value;
                                }
                            }
                    }
                    if (vi.endpointMetadata) {
                        vi.secNamesForEndpoint = secNamesForEndpointMetadata.get(vi.endpointMetadata);
                    }
                    const form = this.createInteractionForm(vi, smInformation.endpointMetadataArray.length > 1);
                    thing.properties[key].forms.push(form);
                }
            }
        }
        logDebug("########### ACTIONS (" + smInformation.actions.size + ")");
        if (smInformation.actions.size > 0) {
            thing.actions = {};
            for (const entry of smInformation.actions.entries()) {
                const key = entry[0];
                const value = entry[1];
                logInfo("Action" + key + " = " + value);
                thing.actions[key] = {};
                thing.actions[key].forms = [];
                for (const vi of value) {
                    if (vi.endpointMetadata) {
                        vi.secNamesForEndpoint = secNamesForEndpointMetadata.get(vi.endpointMetadata);
                    }
                    const form = this.createInteractionForm(vi, smInformation.endpointMetadataArray.length > 1);
                    thing.properties[key].forms.push(form);
                }
            }
        }
        logDebug("########### EVENTS (" + smInformation.events.size + ")");
        if (smInformation.events.size > 0) {
            thing.events = {};
            for (const entry of smInformation.events.entries()) {
                const key = entry[0];
                const value = entry[1];
                logInfo("Event " + key + " = " + value);
                thing.events[key] = {};
                thing.events[key].forms = [];
                for (const vi of value) {
                    if (vi.endpointMetadata) {
                        vi.secNamesForEndpoint = secNamesForEndpointMetadata.get(vi.endpointMetadata);
                    }
                    const form = this.createInteractionForm(vi, smInformation.endpointMetadataArray.length > 1);
                    thing.properties[key].forms.push(form);
                }
            }
        }
        return JSON.stringify(thing);
    }
    transformToTD(aid, template, submodelRegex) {
        return this.transformAAS2TD(aid, submodelRegex);
    }
    transformAAS2TD(aas, template, submodelRegex) {
        const smInformation = this.getSubmodelInformation(aas, submodelRegex);
        return this._transform(smInformation, template);
    }
    transformSM2TD(aid, template, submodelRegex) {
        const submodel = JSON.parse(aid);
        const smInformation = {
            actions: new Map(),
            events: new Map(),
            properties: new Map(),
            endpointMetadataArray: [],
        };
        this.processSubmodel(smInformation, submodel, submodelRegex);
        return this._transform(smInformation, template);
    }
}
exports.AssetInterfaceDescriptionUtil = AssetInterfaceDescriptionUtil;
//# sourceMappingURL=asset-interface-description.js.map